{
  "hash": "dfd6a3753a69d4246f1fb88a69428614",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Linear Regressions with Python\"\nauthor: \"Paulo Gugelmo Cavalheiro Dias\"\ndate: today\ncategories:\n - python\n - statistics\nengine: python3\ndraft: true\n---\n\n\n\nIn this article, I will try to do linear regressions with Python. \nThis is also an occasion for me to try python with Quarto. \n\n# Quarto configuration for Python\n\nTo work with python code in Quarto, we first have to use an engine that supports python. \nFor that, we can use `python3` or `jupyter` for examples. \nThus, in our `YAML` header, we would enter : \n\n```{.yaml}\n---\nengine: python3\n# or : \nengine: jupyter\n---\n```\n\nWe can check our engines with quarto with the command `quarto check`. \nThis function is designed to \"verify [the] correct functioning of Quarto installation\" (from its description in documentation).\nRunning it returns the versions of different kernels that we can use.\n\nFinally, to include python code in our Quarto file, we can write : \n\n````\n```{{python}}\n# Some python code here\n```\n````\n\nFor example : \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Getting the version of Python we are using : \nimport sys \nsys.version_info\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsys.version_info(major=3, minor=12, micro=4, releaselevel='final', serial=0)\n```\n\n\n:::\n:::\n\n\n\nHere, we are for example using Python 3.12.\n\n## Running Julia and R in the same document \n\nDepending on the engine we are using, we can also make use of other languages in the same Quarto document. \nSpecifying the `python3` engine in the `YAML` header of our Quarto document, we can run Julia and R in it.\nFor that, we need packages, such as `JuliaCall` for using Julia with R.\n\nTesting Julia yields : \n\n\n::: {.cell}\n\n```{.julia .cell-code}\n# Getting the version of Julia we are using : \nusing InteractiveUtils\nInteractiveUtils.versioninfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nJulia Version 1.10.3\nCommit 0b4590a550 (2024-04-30 10:59 UTC)\nBuild Info:\n  Built by Homebrew (v1.10.3)\n\n    Note: This is an unofficial build, please report bugs to the project\n    responsible for this build and not to the Julia project unless you can\n    reproduce the issue using official builds available at https://julialang.org/downloads\n\nPlatform Info:\n  OS: macOS (arm64-apple-darwin23.4.0)\n  CPU: 8 Ã— Apple M1\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-15.0.7 (ORCJIT, apple-m1)\nThreads: 1 default, 0 interactive, 1 GC (on 4 virtual cores)\nEnvironment:\n  DYLD_FALLBACK_LIBRARY_PATH = /Library/Frameworks/R.framework/Resources/lib:/Library/Java/JavaVirtualMachines/jdk-11.0.18+10/Contents/Home/lib/server\n```\n\n\n:::\n:::\n\n\n\nTesting R yields : \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Getting the version of R we are using : \nversion\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          4.0                         \nyear           2024                        \nmonth          04                          \nday            24                          \nsvn rev        86474                       \nlanguage       R                           \nversion.string R version 4.4.0 (2024-04-24)\nnickname       Puppy Cup                   \n```\n\n\n:::\n:::\n\n\n\nSince the rest of the article will exclusively be using python, we will not mention further details of engines in Quarto.\nIt is however interesting to keep in mind that Quarto allows this multiple integration.\n\n# Simple linear regression\n\nThis section of the article treats how to do a simple linear regression with Python. \nWe will first generate random data, we will plot it, and we will then add the linear regression in our plot. \n\n## Generating data\n\nI found two main libraries to generate random data in Python. \nThe first one is the `random` library, and the second one is the `numpy` library.\n\nWith the random library, we can use the `random` method to generate by default a float number between 0 and 1. \nA way to create a vector of 100 random values is to use the `random` method between square brackets, followed by the `for` instruction, similar to the one in Julia. \nThis will generate a list of size 100, such that : \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport random\ny = ([random.random() for _ in range(100)])\nx = ([random.random()*y[_] for _ in range(100)])\n```\n:::\n\n\n\nLet us comment a bit this code : \n\n- It is possible to call methods with the name of their libraries in front of it.\nIn this sense, `random.random` refers to the method `random` inside the `random` library.\n- The underscore syntax `_` combined with `for` loops to iterated for a set number of times. \nBy default, it just ass\n- The `range()` function allows to\n> Return an object that produces a sequence of integers from start (inclusive) to stop (exclusive) by step.\nRange(i, j) produces i, i+1, i+2, ..., j-1. Start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\nThese are exactly the valid indices for a list of 4 elements.\nWhen step is given, it specifies the increment (or decrement).\n\nA second way of generating random data is using the numpy library. \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy\nprint(\"test\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntest\n```\n\n\n:::\n:::\n\n\n\n## Plotting the data\n\nNow that we generated some data, let us plot it.\nTo do that, we can use the [matplotlib library](https://matplotlib.org/). \nMore specifically, we are going to use pyplot inside matplotlib, and are thus going to import `matplotlib.pyplot` :\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot\nmatplotlib.pyplot.scatter(x,y)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n- The `scatter()` function of `matplotlib.pyplot` allows to plot a scatterplot with two vectors of the same size.\n\n>> The `scatter()` \"function\" could also being called a \"method\".\nThis distinction seems to also exist in other programming languages and is definitely worth understanding. \nFor the sake of linear regressions, it does not matter for now to develop a full grasp of this distinction.\nIn the rest of this article, we will thus stick to the \"function\" term. \nWe should however keep in mind that there exists a distinction between the terms.\n\n## Fitting our model\n\nWe are now going to fit our statistical model with our randomly generated values. \nIn order for us to do that, we can use the `scipy.stats` library.\nThis library has a `linregress()` function that allows to compute the OLS estimates to explain the second variable with the second one : \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport scipy\nmodel = scipy.stats.linregress(x,y)\nmodel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinregressResult(slope=np.float64(0.7566902866860894), intercept=np.float64(0.32955925888477683), rvalue=np.float64(0.6170154423726931), pvalue=np.float64(8.14696149387653e-12), stderr=np.float64(0.09748926655435604), intercept_stderr=np.float64(0.03407468268081782))\n```\n\n\n:::\n:::\n\n\n\nWe see that the `scipy.stats.linregress()` function returns a five elements object.\nTo make it easier to see, we could generate five variables, define a function with those variables and plot a line based on this function : \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nslope, intercept, r, p, std_err = scipy.stats.linregress(x, y)\n\ndef myfunc(x):\n  return slope * x + intercept\n\nmymodel = list(map(myfunc, x))\n```\n:::\n\n\n\nNow, if we want to add this line to our plot, we can run : \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmatplotlib.pyplot.scatter(x,y)\nmatplotlib.pyplot.plot(x, mymodel)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-3.png){width=672}\n:::\n:::\n\n\n\nIf we want only the more relevant information, we can choose to only work with the two first elements of the array, and plot it : \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef f(x):\n    return scipy.stats.linregress(x, y)[1]+numpy.dot(x,scipy.stats.linregress(x, y)[0])\n\nfloat(scipy.stats.linregress(x, y)[1]),float(scipy.stats.linregress(x, y)[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(0.32955925888477683, 0.7566902866860894)\n```\n\n\n:::\n\n```{.python .cell-code}\nmatplotlib.pyplot.scatter(x,y)\nmatplotlib.pyplot.plot(x, f(x))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-5.png){width=672}\n:::\n:::\n\n\n\nNow that we covered a how to perform a simple linear regression with Python, let us move to a multiple linear regression.\n\n# Multiple linear regression\n\nIn this section, we are going to perform a multiple linear regression. \nFirst, we are going to generate data and fit our model.\nThen, we will plot a static scatter plot, and finally a rotatable plot. \n\n## Running a multiple linear regression\n\nFirst, let us generate some random data and fit our model : \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nx,y,z = (numpy.dot([random.random() for _ in range(100)],_) for _ in (1,2,3))\nlen(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n100\n```\n\n\n:::\n:::\n\n\n\n## Plotting a static 3D plot\n\nIf we now want to limit ourselves to a three dimensional problem, we can plot 3D graphs. \nIn this section, we are going to plot a static graph. \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nA = matplotlib.pyplot.figure()\nB = A.add_subplot(projection='3d')\nB.scatter(x,y,z)\nB.set_xlabel(\"X\")\nB.set_ylabel(\"Y\")\nB.set_zlabel(\"Z\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-7.png){width=672}\n:::\n:::\n\n\n\n## Plotting a rotatable 3D plot \n\nNow it's time for a rotatable plot, like in the previous article. \nFortunately, the plotly library does also exist for Python, which is great, because I did not find any other library to get a similar result. \nThe thing with plotly is that it requires a syntax involving pandas. \nI thus create a dataframe object from a dictionary with the three previously created vectors. \nIn the end, I get : \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport plotly.express as px\nimport pandas\ndata = {'c1':[x],'c2':[y],'c3':[z]}\nX = pandas.DataFrame(data)\nfig = px.scatter_3d(X, x,y,z)\nfig.show()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div>                        <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.32.0.min.js\"></script>                <div id=\"20aa5518-c987-4286-8225-088e3e32920d\" class=\"plotly-graph-div\" style=\"height:100%; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"20aa5518-c987-4286-8225-088e3e32920d\")) {                    Plotly.newPlot(                        \"20aa5518-c987-4286-8225-088e3e32920d\",                        [{\"hovertemplate\":\"x=%{x}\\u003cbr\\u003ey=%{y}\\u003cbr\\u003ez=%{z}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"\",\"scene\":\"scene\",\"showlegend\":false,\"x\":[0.9284713846342819,0.7204524006892693,0.3128803951881953,0.7650103753373427,0.4702446480039554,0.09665425860610033,0.7552653264842473,0.3407954931924789,0.7629028936963937,0.3034180128236583,0.32546287628007897,0.009689601002962678,0.3095521943994962,0.24346634264986455,0.8195098771521461,0.374146495404723,0.02059543546013687,0.21556788297530705,0.9198635987483121,0.10550133835180997,0.8986988151616828,0.17555711329425117,0.8490248617448853,0.6990868610329822,0.5734131387056746,0.1453347061170699,0.5934473307035644,0.41792484516347006,0.3610669677377356,0.7794680565706332,0.5109243733086399,0.7616207815979801,0.9102357828043154,0.430417306419696,0.8441073447536471,0.8190995115523795,0.8697826249986633,0.9131656260943981,0.9676482943425939,0.17605615380692718,0.03674982895513079,0.00779494759849908,0.4214799270909739,0.7766235165833486,0.1301768404717859,0.6552121909092276,0.9340938357583498,0.05449667761853039,0.03105413484458941,0.07029850946829941,0.8778458076711416,0.7084825463360778,0.34401650711834775,0.674694538620471,0.3718537630632215,0.7924499605736568,0.5016797407159574,0.7173459797404361,0.1582424359593656,0.37255785557806864,0.7570271532258518,0.2566715358083559,0.28230405536072845,0.28207400101622404,0.5707737376213001,0.9470171270036583,0.36441893519543866,0.4907695522604001,0.6010238375806451,0.22046892019905884,0.4635737188975674,0.781287194120588,0.6892174910098069,0.6481830694146187,0.627480075818286,0.7141261011408314,0.48830459660788095,0.3686922104979041,0.1414368314767258,0.7460372929841613,0.2980961623273253,0.4912943036097984,0.7807063372923378,0.5323554095942721,0.0979093640318438,0.28194694047674873,0.6954967308101588,0.4632856850898811,0.17192059444233743,0.6628193478162315,0.0386134597135156,0.11307366481525394,0.04641527513781829,0.5702326501913411,0.1300858079358308,0.5812101368927589,0.009213142458641133,0.25840987708577556,0.7586802272522513,0.2798064147026914],\"y\":[0.6384523225209546,0.30839611935434275,1.4725568997955498,0.9857720120596352,1.9578864253761787,1.8235057445988567,1.44208796774216,0.3202488923284206,0.1505782403286502,1.8542444463893306,0.7129801843237065,1.3799283341567168,0.011210287745814451,0.4372672225601797,1.2643758880021458,0.7146082966475127,0.7229221507427717,1.8599257204964117,1.5182982729139272,0.3539311180432849,1.5281164585958953,0.5907243519848462,0.9448955489086674,0.4810784107056014,1.7402819555814868,1.5738742602421953,0.8138308996254402,0.13621104309134524,0.28091111593224394,1.7749414123178748,0.8201904552111998,0.8545646095428312,1.9829704200607345,1.635084133303875,0.9592371770713601,1.039145801822125,1.0480634629888554,1.929755195786137,1.2314311337761437,1.623058639454163,1.530603515988516,0.1635584870103346,0.15154447155572237,1.117940273153121,0.1469942205083088,1.8918239941937105,1.4816636229054332,0.8543924729311767,0.20284437982605819,1.8202984124252508,1.6126938349046682,1.3551399909273665,1.1439057244997195,0.9001338642788199,1.0276048762833274,0.6656688401446476,1.1641934279096737,0.12541722777028363,1.8445423025281196,1.756320216166003,1.4776884772962622,0.5973373224079066,1.4354833287222846,1.420480452980565,0.7622407564214659,0.3408356273335904,0.32083780175499266,0.5395237344036423,1.3621281562715346,0.9618928498107857,1.3058825941561703,1.5935802423345946,1.6947653472030457,0.13790989860520564,0.21744126421662435,1.2080373399797077,1.5090528875836686,0.9403208897937594,0.46168859249396865,1.1857950284991805,1.0538461637909584,0.3547004216763865,1.5545572232119707,1.1505808219621319,0.06298489846276878,0.13033884872745505,0.4952109314920128,1.7005323549352391,1.3324779697798395,0.5191944317677493,1.9468266322597898,0.3600799732556954,1.134900083019181,1.077361154748939,1.6661833234859755,1.6878084117750904,1.918181295097847,0.026591516751911293,1.9924687696438452,0.9598597727613707],\"z\":[1.4734797676688964,0.9980421529049592,0.5278763236767922,2.6675385646437535,0.46693608584056556,0.06791936878801696,0.00999061286190206,2.324981637087788,2.6270490353513267,1.7996767286593471,2.6551288575833207,0.6484352626739107,0.00847672492409346,0.9812403747583678,1.1979461017580255,2.980375923529336,0.6895375418677179,2.9625140043605143,2.6461686231580432,0.5023956864641445,1.6889033720982827,2.26293646622839,2.2189544348874453,0.6250946199292705,1.2425727164842364,0.08666176132860015,1.7248729157236697,1.9833233795410772,1.7005918862792564,1.759226620315889,2.2463324555619097,0.5495576972384424,0.39353356305712417,0.9841894940970549,0.3511511843057271,0.39826621025406983,0.5434525330869909,0.34338533897403456,1.6932378804772137,0.4087072060145094,2.518186653563123,2.0472080917314077,2.9037779919878877,0.5785040114901413,2.643551099787955,2.4811212464775116,0.6987787317561692,2.4952799847788043,1.8395740108644874,2.333590586963903,2.1475618812427766,1.9694890237938338,0.2576043787590946,0.5069354181689848,0.08145110465217609,0.7043506727002985,1.2037600754535362,2.5388255659428847,1.7770304000077306,1.262886278486048,1.530491984951151,1.330661274629759,0.4818873769217432,2.6768408570714204,1.203422447032759,0.8166918094386462,1.501374398113307,1.36013580569536,2.152007507974134,0.7119825325529141,0.1773843498361033,1.6561392590006583,1.0566457843661152,1.450617352963892,1.5994071104871037,2.1172673281542096,1.2164701832367502,1.8965695538356733,2.640371949075093,1.8401596276667584,1.193491368916908,2.364723885212309,1.0187695889980302,2.895195956236887,1.4108262461354095,1.569966850182345,2.3453244927146617,0.19781639782143756,0.942721450667564,2.4009458151488974,0.9597413509021456,1.56081321070344,1.5788267515467125,1.949985799838517,1.229470857998534,1.0087439505104359,0.5355943535156186,2.848291871718633,1.5406239302358251,2.703231438690612],\"type\":\"scatter3d\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"scene\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"xaxis\":{\"title\":{\"text\":\"x\"}},\"yaxis\":{\"title\":{\"text\":\"y\"}},\"zaxis\":{\"title\":{\"text\":\"z\"}}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60}},                        {\"responsive\": true}                    )                };                            </script>        </div>\n```\n\n:::\n:::\n\n\n\nWe note that this yields a plot with identical features to the ones obtained in the previous article with Julia. \n\nIf we now want to show the plane that satisfies the OLS condition, we can run : \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(\"test\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntest\n```\n\n\n:::\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}