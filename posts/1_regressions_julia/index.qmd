---
title: "Linear Regressions with Julia"
author: "Paulo Gugelmo Cavalheiro Dias"
date: today
categories:
 - julia 
 - statistics
jupyter: julia-1.10
draft: false
---

The first time I heard about [Julia](https://julialang.org/) was a few months ago, in an introductory class to programming.
Since then, I have come to know a bit more about the reputation of the language, supposely very efficient and especially suited for scientific computations.

In this article, I will try to perform some basic linear regressions with Julia and to plot them. 

## Simple linear regression

Here, let us try to explain one continuous variable by another continuous variable. 

First, those are the packages we are going to use : 
```{julia}
using Plots
using GLM
```

- The [Plots package](https://docs.juliaplots.org/stable/) seems to be the most general package to plot data with Julia.
It is a simple interface to several underlying plotting packages, like **gr** or **plotly**.
In this sense, it allows to easily switch between different frameworks that have different features, while keeping the same syntax. 

- The [GLM package](https://juliastats.org/GLM.jl/stable/) seems to be the main package for Generalized Linear Models (GLM) with Julia.
It will be useful in the computation of our simple and multinomial linear models.

Now, let us generate some data : 

```{julia}
x = range(0, 1, length=100)
# Generate data : 
y = rand(100) .* x

# Check the data :
size(y)
```

- The function `range()` in Julia allows to create an array with a starting and an ending value.
Although having similar properties than vectors, arrays created with the `range()` function have the "Range" type (or `StepRangeLen` to be exact).
Here, I just initialise the `x` array to compute an easy to use `y` vector.
- The function `rand()` in Julia allows to randomly generate numbers.
The default settings of the function make it so that the drawn data is of type `Float64` between $0$ and $1$.
Its argument, set to the value of $100$, indicates the number of random values that are to be drawn.
Therefore, `rand(100)` returns a vector of 100 `Float64` numbers.
- The `.*` function is a vectorized multiplication.
In Julia, adding a dot `.` before a mathematical operator allows to apply this operation to all the elements of a vector.
If we wanted to add $2$ to all the elements of the `y` vector, we should have written `y .+= 2`.
- The last function `size()` is useful to get more dimension of the array we consider.
In our case, it yields `(100,)` because it is a $100$ rows vector.
We would get the same if we did `size(y)`. 

Now, let us plot the data we just created : 

```{julia}
plot(
	scatter(x,y, label = "data"),
	title = "Generating Random Data",
	ylabel = "Random variable",
	xlabel = "x",
)
```

The function `plot()` in Julia comes from the Plots package.
It is the default plotting function, with the **gr** backend by default (we will get to that later on).
It contains several elements : 

- The function `scatter()` allows to plot a scatterplot, i.e. independent points that are not linked by a line.
If we had not indicated the `scatter()` function, it would have plotted a line between all the points.
- The `label` value is the one that gets displayed within the box.
Specifying "data" allows to avoid the "y1" default value.
- `title`, `ylabel` and `xlabel` are pretty straightforward to understand.

It is now time to run a simple linear regression.
Two simple ways to run such a model are : 

- Using the GLM package,
- Using the built-in matrix computation function of Julia. 

### GLM package

First, with the GLM package : 

```{julia}
model = lm(@formula(y ~ x), (;y, x))
```

Now, if we want to plot our model with the data, we can run : 
```{julia}
coefs = GLM.coef(model)
plot!((x) -> coefs[1] + coefs[2] * x, label="model", 
	title = "Simple linear regression")
```

If we want to include the equation of our linear model in the legend of the plot, we can use the LaTeXStrings.jl package : 

```{julia}
using LaTeXStrings
plot(title = "Simple linear regression", 
	scatter(x,y, label = false),
	(x) -> coefs[1] + coefs[2] * x, label=latexstring("y=$(coefs[1]) + $(coefs[2]) * x"))
```

And if we want it to be outside the plot : 

```{julia}
plot!(legend=:outerbottom, legendcolumns=1)
```

### Matrix computation

Second, with the built-in matrix computation function : 

```{julia}
X = [ones(length(x)) x] 
(X\y)
```

The first line creates a matrix $X$ such that $X\in\mathbb{R}^{100\times 100}$, with its first columns being only ones, and its second column being the vector of $x$.

Without entering into the details, it does exactly what the OLS method does, but in a more rudimentary way, using the normal equation to find the OLS estimates. 

### Performance comparison

We see that both approaches yield the same result, but what are the differences between them ? 
Apart from the syntax, we could check the performance of each of them.
In order for us to do that, we are going to use the `@time` function, which returns the time and space used by a chosen function.

:::: {.column-page layout-ncol=2}
::: {.column}
Built-in matrix approach :
```{julia}
@time begin
	vec_1 = ones(length(x))
	X = transpose([transpose(vec_1);transpose(x)])
	(X\y)
end
```
:::
:::{.column}
GLM package approach :
```{julia}
@time begin 
	model = lm(@formula(y ~ x), (;x, y))
	GLM.coef(model)[1:2]
end
```
:::
:::

If we compare the information returned by the `@time` function, we see that the matrix computation approach seems to be slightly faster. However, we have to take into account that the `lm()` function does not only compute the coefficients, but alswo other informations, that are here not displayed, such as the confidence interval, and the probability associated to the t-statistic. In this sense, this comparison does not make justice to the GLM package. We can however remember that if we only wanted the coefficients of such a model, we could prefer the matrix multiplication approach if we need time. 

## Multiple linear regression

Here, let us try to explain one continuous variable by multiple continuous variables.

Again, we first have to generate and plot the data : 

```{julia}
# Generating random data :
x,y,w,z = (rand(100) for _ in 1:4)

# Plotting the data :
plot(scatter(x, y, z,
	title = "Static 3D plot", 
	marker_z = w, label="data"))
```

### Rotatable plot

Now, we could continue with the plot function of the default **gr** backend package of `Plots`, but to get rotable 3D plots, we can use the PlotlyJS package.
Since Plot.jl integrates plotly, we could try just adding `plotly()` : 

```{julia}
#| eval: true
# We switch from the gr() to the plotlyjs() backend within Plots :
plotlyjs()
# We plot :
plot(scatter(x, y, z;
		marker_z = w,
		markersize = 2, 
		title = "Rotatable 3D plot",
		label = "data", 
		xlabel = "x",
		ylabel = "y", 
		zlabel = "z"))
```
It is now time for some model. 
Let us consider that the variable `z` can be explained linearly by the variables `x` and `y`, and that `w` does not provide supplementary information. 

We are going to use the two methods we saw previously :

:::: {.column-page layout-ncol=2}
:::{.column}
Built-in matrix approach :
```{julia}
# Using matrix computations :
@time begin
	X = [ones(length(x)) x y]
	X\z
end
```
:::
:::{.column}
GLM package approach :
```{julia}
# Using GLM : 
@time begin 
	model = lm(@formula(z ~ x + y), (;x, y, z))
	coefs = GLM.coef(model)
	coefs
end
```
:::

As before, both results are approximatively the same, with a small advantage for the matrix computation approach in performance terms. 
:::

### Plotting a multinomial regression 

Now let's try to plot the plane of this regression : 

```{julia}
linear_model(x,y) = coefs[1] .+ coefs[2] * x .+ coefs[3] * y
plot(x,y,linear_model,
	st=:surface,
	title = "Plane of a two dimensional linear regression",
	label="model",
	xlabel ="x",
	ylabel = "y",
	zlabel = "z")

```

While I did not manage to plot simulatneously the points and the surface on the plot, it seemed a satisfactory result for the moment. 
